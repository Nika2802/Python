   pip install Django==1.9.9
   pip install celery
   pip install django-celery-email

   django-admin startproject email_service
   cd email_service
   python manage.py startapp newsletter
   INSTALLED_APPS = (
       ...
       'newsletter',
       'django_celery_email',
   )

from django.db import models

class Subscriber(models.Model):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    birthday = models.DateField(null=True, blank=True)

class EmailCampaign(models.Model):
    subject = models.CharField(max_length=255)
    html_content = models.TextField()
    subscribers = models.ManyToManyField(Subscriber)
    send_time = models.DateTimeField(null=True, blank=True)

from celery import shared_task
from django.core.mail import EmailMultiAlternatives
from .models import EmailCampaign

@shared_task
def send_email_campaign(campaign_id):
    campaign = EmailCampaign.objects.get(id=campaign_id)
    subscribers = campaign.subscribers.all()
    
    for subscriber in subscribers:
        # Замените переменные в шаблоне
        html_content = campaign.html_content.format(
            first_name=subscriber.first_name,
            last_name=subscriber.last_name,
            birthday=subscriber.birthday,
        )
        
        email = EmailMultiAlternatives(
            subject=campaign.subject,
            body='',
            to=[subscriber.email],
        )
        email.attach_alternative(html_content, "text/html")
        email.send()

<div class="modal" tabindex="-1" role="dialog" id="createCampaignModal">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <form id="campaignForm">
        <div class="modal-header">
          <h5 class="modal-title">Создать рассылку</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <input type="text" name="subject" placeholder="Тема" required />
          <textarea name="html_content" placeholder="HTML контент" required></textarea>
          <input type="datetime-local" name="send_time" placeholder="Отложенное время" />
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
          <button type="submit" class="btn btn-primary">Отправить</button>
        </div>
      </form>
    </div>
  </div>
</div>

$(document).ready(function() {
    $('#campaignForm').on('submit', function(e) {
        e.preventDefault();
        $.ajax({
            type: 'POST',
            url: '/create_campaign/',  // URL для обработки формы
            data: $(this).serialize(),
            success: function(response) {
                alert('Рассылка создана!');
                $('#createCampaignModal').modal('hide');
            },
            error: function(error) {
                alert('Ошибка создания рассылки!');
            }
        });
    });
});

# urls.py
from django.conf.urls import url
from .views import create_campaign

urlpatterns = [
    url(r'^create_campaign/$', create_campaign, name='create_campaign'),
]

# views.py
from django.http import JsonResponse
from .models import EmailCampaign
from .tasks import send_email_campaign
from django.utils import timezone
import json

def create_campaign(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        subject = data['subject']
        html_content = data['html_content']
        send_time = data.get('send_time')
        
        campaign = EmailCampaign.objects.create(subject=subject, html_content=html_content)
        
        # Можно добавить подписчиков к рассылке
        # subscribers = Subscriber.objects.all()
        # campaign.subscribers.add(*subscribers)
        
        if send_time:
            campaign.send_time = timezone.datetime.strptime(send_time, "%Y-%m-%dT%H:%M")
            campaign.save()
            send_email_campaign.apply_async((campaign.id,), eta=campaign.send_time)
        else:
            send_email_campaign.delay(campaign.id)

        return JsonResponse({'status': 'success'})
    return JsonResponse({'status': 'error'}, status=400)

<img src="https://your-domain.com/track_open/?campaign_id={{ campaign.id }}&subscriber_id={{ subscriber.id }}" width="1" height="1" />
